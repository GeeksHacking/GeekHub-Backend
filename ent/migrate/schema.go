// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// LanguagesColumns holds the columns for the "languages" table.
	LanguagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// LanguagesTable holds the schema information for the "languages" table.
	LanguagesTable = &schema.Table{
		Name:       "languages",
		Columns:    LanguagesColumns,
		PrimaryKey: []*schema.Column{LanguagesColumns[0]},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "repository", Type: field.TypeString},
		{Name: "project_owner", Type: field.TypeInt, Nullable: true},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "projects_users_owner",
				Columns:    []*schema.Column{ProjectsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"epic", "story", "bug", "task"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"backlog", "development", "qa", "release"}},
		{Name: "project_tickets", Type: field.TypeInt, Nullable: true},
		{Name: "ticket_parent", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "user_reported_tickets", Type: field.TypeInt, Nullable: true},
		{Name: "user_assigned_tickets", Type: field.TypeInt, Nullable: true},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_projects_tickets",
				Columns:    []*schema.Column{TicketsColumns[5]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tickets_tickets_parent",
				Columns:    []*schema.Column{TicketsColumns[6]},
				RefColumns: []*schema.Column{TicketsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tickets_users_reported_tickets",
				Columns:    []*schema.Column{TicketsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tickets_users_assigned_tickets",
				Columns:    []*schema.Column{TicketsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "display_name", Type: field.TypeString},
		{Name: "auth0_id", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// ProjectTagsColumns holds the columns for the "project_tags" table.
	ProjectTagsColumns = []*schema.Column{
		{Name: "project_id", Type: field.TypeInt},
		{Name: "tag_id", Type: field.TypeInt},
	}
	// ProjectTagsTable holds the schema information for the "project_tags" table.
	ProjectTagsTable = &schema.Table{
		Name:       "project_tags",
		Columns:    ProjectTagsColumns,
		PrimaryKey: []*schema.Column{ProjectTagsColumns[0], ProjectTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "project_tags_project_id",
				Columns:    []*schema.Column{ProjectTagsColumns[0]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "project_tags_tag_id",
				Columns:    []*schema.Column{ProjectTagsColumns[1]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProjectLanguagesColumns holds the columns for the "project_languages" table.
	ProjectLanguagesColumns = []*schema.Column{
		{Name: "project_id", Type: field.TypeInt},
		{Name: "language_id", Type: field.TypeInt},
	}
	// ProjectLanguagesTable holds the schema information for the "project_languages" table.
	ProjectLanguagesTable = &schema.Table{
		Name:       "project_languages",
		Columns:    ProjectLanguagesColumns,
		PrimaryKey: []*schema.Column{ProjectLanguagesColumns[0], ProjectLanguagesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "project_languages_project_id",
				Columns:    []*schema.Column{ProjectLanguagesColumns[0]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "project_languages_language_id",
				Columns:    []*schema.Column{ProjectLanguagesColumns[1]},
				RefColumns: []*schema.Column{LanguagesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserProjectsColumns holds the columns for the "user_projects" table.
	UserProjectsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "project_id", Type: field.TypeInt},
	}
	// UserProjectsTable holds the schema information for the "user_projects" table.
	UserProjectsTable = &schema.Table{
		Name:       "user_projects",
		Columns:    UserProjectsColumns,
		PrimaryKey: []*schema.Column{UserProjectsColumns[0], UserProjectsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_projects_user_id",
				Columns:    []*schema.Column{UserProjectsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_projects_project_id",
				Columns:    []*schema.Column{UserProjectsColumns[1]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		LanguagesTable,
		ProjectsTable,
		TagsTable,
		TicketsTable,
		UsersTable,
		ProjectTagsTable,
		ProjectLanguagesTable,
		UserProjectsTable,
	}
)

func init() {
	ProjectsTable.ForeignKeys[0].RefTable = UsersTable
	TicketsTable.ForeignKeys[0].RefTable = ProjectsTable
	TicketsTable.ForeignKeys[1].RefTable = TicketsTable
	TicketsTable.ForeignKeys[2].RefTable = UsersTable
	TicketsTable.ForeignKeys[3].RefTable = UsersTable
	ProjectTagsTable.ForeignKeys[0].RefTable = ProjectsTable
	ProjectTagsTable.ForeignKeys[1].RefTable = TagsTable
	ProjectLanguagesTable.ForeignKeys[0].RefTable = ProjectsTable
	ProjectLanguagesTable.ForeignKeys[1].RefTable = LanguagesTable
	UserProjectsTable.ForeignKeys[0].RefTable = UsersTable
	UserProjectsTable.ForeignKeys[1].RefTable = ProjectsTable
}
