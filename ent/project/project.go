// Code generated by entc, DO NOT EDIT.

package project

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRepository holds the string denoting the repository field in the database.
	FieldRepository = "repository"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeTickets holds the string denoting the tickets edge name in mutations.
	EdgeTickets = "tickets"
	// EdgeLanguages holds the string denoting the languages edge name in mutations.
	EdgeLanguages = "languages"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "user_projects"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "project_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// TicketsTable is the table that holds the tickets relation/edge.
	TicketsTable = "tickets"
	// TicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketsInverseTable = "tickets"
	// TicketsColumn is the table column denoting the tickets relation/edge.
	TicketsColumn = "project_tickets"
	// LanguagesTable is the table that holds the languages relation/edge. The primary key declared below.
	LanguagesTable = "project_languages"
	// LanguagesInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguagesInverseTable = "languages"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "projects"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "project_owner"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldRepository,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "projects"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_owner",
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "project_id"}
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"project_id", "tag_id"}
	// LanguagesPrimaryKey and LanguagesColumn2 are the table columns denoting the
	// primary key for the languages relation (M2M).
	LanguagesPrimaryKey = []string{"project_id", "language_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
