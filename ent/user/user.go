// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldAuth0ID holds the string denoting the auth0_id field in the database.
	FieldAuth0ID = "auth0_id"
	// EdgeProjects holds the string denoting the projects edge name in mutations.
	EdgeProjects = "projects"
	// EdgeReportedTickets holds the string denoting the reported_tickets edge name in mutations.
	EdgeReportedTickets = "reported_tickets"
	// EdgeAssignedTickets holds the string denoting the assigned_tickets edge name in mutations.
	EdgeAssignedTickets = "assigned_tickets"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ProjectsTable is the table that holds the projects relation/edge. The primary key declared below.
	ProjectsTable = "user_projects"
	// ProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectsInverseTable = "projects"
	// ReportedTicketsTable is the table that holds the reported_tickets relation/edge. The primary key declared below.
	ReportedTicketsTable = "user_reported_tickets"
	// ReportedTicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	ReportedTicketsInverseTable = "tickets"
	// AssignedTicketsTable is the table that holds the assigned_tickets relation/edge. The primary key declared below.
	AssignedTicketsTable = "user_assigned_tickets"
	// AssignedTicketsInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	AssignedTicketsInverseTable = "tickets"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldDisplayName,
	FieldAuth0ID,
}

var (
	// ProjectsPrimaryKey and ProjectsColumn2 are the table columns denoting the
	// primary key for the projects relation (M2M).
	ProjectsPrimaryKey = []string{"user_id", "project_id"}
	// ReportedTicketsPrimaryKey and ReportedTicketsColumn2 are the table columns denoting the
	// primary key for the reported_tickets relation (M2M).
	ReportedTicketsPrimaryKey = []string{"user_id", "ticket_id"}
	// AssignedTicketsPrimaryKey and AssignedTicketsColumn2 are the table columns denoting the
	// primary key for the assigned_tickets relation (M2M).
	AssignedTicketsPrimaryKey = []string{"user_id", "ticket_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
