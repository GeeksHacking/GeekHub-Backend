// Code generated by entc, DO NOT EDIT.

package ticket

import (
	"fmt"
)

const (
	// Label holds the string label denoting the ticket type in the database.
	Label = "ticket"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeReporter holds the string denoting the reporter edge name in mutations.
	EdgeReporter = "reporter"
	// EdgeAssignee holds the string denoting the assignee edge name in mutations.
	EdgeAssignee = "assignee"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// Table holds the table name of the ticket in the database.
	Table = "tickets"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "tickets"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_tickets"
	// ReporterTable is the table that holds the reporter relation/edge. The primary key declared below.
	ReporterTable = "user_reported_tickets"
	// ReporterInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ReporterInverseTable = "users"
	// AssigneeTable is the table that holds the assignee relation/edge. The primary key declared below.
	AssigneeTable = "user_assigned_tickets"
	// AssigneeInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AssigneeInverseTable = "users"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "tickets"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "ticket_parent"
)

// Columns holds all SQL columns for ticket fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldType,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tickets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_tickets",
	"ticket_parent",
}

var (
	// ReporterPrimaryKey and ReporterColumn2 are the table columns denoting the
	// primary key for the reporter relation (M2M).
	ReporterPrimaryKey = []string{"user_id", "ticket_id"}
	// AssigneePrimaryKey and AssigneeColumn2 are the table columns denoting the
	// primary key for the assignee relation (M2M).
	AssigneePrimaryKey = []string{"user_id", "ticket_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeEpic  Type = "epic"
	TypeStory Type = "story"
	TypeBug   Type = "bug"
	TypeTask  Type = "task"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeEpic, TypeStory, TypeBug, TypeTask:
		return nil
	default:
		return fmt.Errorf("ticket: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusBacklog     Status = "backlog"
	StatusDevelopment Status = "development"
	StatusQa          Status = "qa"
	StatusRelease     Status = "release"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusBacklog, StatusDevelopment, StatusQa, StatusRelease:
		return nil
	default:
		return fmt.Errorf("ticket: invalid enum value for status field: %q", s)
	}
}
